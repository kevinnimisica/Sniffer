/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Controlador;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.format.FormatUtils;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.network.Icmp;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Http;
import org.jnetpcap.protocol.tcpip.Tcp;
import org.jnetpcap.protocol.tcpip.Udp;

/**
 *
 * @author Kevin
 */
public class GraphicInterface extends javax.swing.JFrame {

    /**
     * Creates new form GraphicInterface
     */
    private static Controlador control;
    public GraphicInterface(Controlador contro) {
        initComponents();
        control = contro;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Iniciar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaPaqs = new javax.swing.JTable();
        parar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        especificacion = new javax.swing.JTextArea();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Iniciar.setText("Iniciar");
        Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarActionPerformed(evt);
            }
        });

        TablaPaqs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Version IP", "Origen", "Destino", "Protocolo", "Información"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaPaqs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaPaqsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaPaqs);

        parar.setText("Parar");
        parar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararActionPerformed(evt);
            }
        });

        especificacion.setColumns(20);
        especificacion.setRows(5);
        jScrollPane3.setViewportView(especificacion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Iniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(parar)
                        .addGap(98, 98, 98))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Iniciar)
                    .addComponent(parar))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarActionPerformed
        control.iniciarCap();        // TODO add your handling code here:
    }//GEN-LAST:event_IniciarActionPerformed

    private void pararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararActionPerformed
        control.PararCap();        // TODO add your handling code here:
    }//GEN-LAST:event_pararActionPerformed

    private void TablaPaqsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPaqsMouseClicked
        int index = TablaPaqs.getSelectedRow();
        TableModel mod = TablaPaqs.getModel();
        especificacion.setText((String) mod.getValueAt(index,5));
        
    }//GEN-LAST:event_TablaPaqsMouseClicked

    /**
     * @param args the command line arguments
     */
   

    public void actualizar(PcapPacket packet) {
        DefaultTableModel model = (DefaultTableModel) TablaPaqs.getModel();
        Ip4 ip = new Ip4();
        Icmp icmp = new Icmp();
        Tcp tcp = new Tcp();
        Udp udp = new Udp();
        Http http = new Http();
        String mcSrc, mcDest, ipSrc, ipDest, info = "", version = null, protocolo = null;
        Ethernet eth = new Ethernet();
        if (packet.hasHeader(eth))
        {
            mcSrc = FormatUtils.mac(eth.source());
            mcDest = FormatUtils.mac(eth.destination());
            ipSrc = FormatUtils.ip(packet.getHeader(ip).source());
            ipDest = FormatUtils.ip(packet.getHeader(ip).destination());
            version = Integer.toString(ip.version());
            info += "MAC origen: " + mcSrc + " MAC Destino: " + mcDest;
            info += "\nTipo ehternet: " + eth.typeDescription() ;
            info += "\nVersion IP: " + eth.typeEnum() + " IP origen: " + ipSrc+ " IP Destiono: " + ipDest;
            info += "\nLongitud Total IP: " + ip.length() + 
                    " Flags DF: " + ip.flags_DFDescription() + " Flags MF: " + ip.flags_MFDescription();
            info += "\nPosicion fragmento: " + ip.offsetDescription();
            if(packet.hasHeader(icmp))
            {
                protocolo = "ICMP";
                info += "\nProtocolo: "+ ip.ID;
                info += "\nProtocolo: ICMP Tipo ICMOP: "+icmp.type(); 
                info += "\nChecksum: "+icmp.checksumDescription();
                info += "\nCodigo: " + icmp.code();
            }
            if(packet.hasHeader(tcp) )
            {
                protocolo = "TCP";
                info += "\nProtocolo: TCP: ";
                info += "\nPueto Origen: " + tcp.source() + " Puerto Destino: " + tcp.destination();
                info += "\nNumero de Secuencia: " + tcp.seq() + " Numero de acuse: " + tcp.ack();
                info += "\nLongitud de la cabecera :" + tcp.getLength();
                info += "\nTamaño de la ventana: " + tcp.window();
                if(packet.hasHeader(http))
                {
                    protocolo = "HTTP";
                    String host = http.fieldValue(Http.Request.Host);
                    String url = host + http.fieldValue(Http.Request.RequestUrl);
                    String referer =  http.fieldValue(Http.Request.Referer);
                    info += "\nHTTP: " + "\nHost: "+ host+"\nUrl:"+url+"\nReferer: "+ referer;
                    info += "\nUser-Agent: " + http.fieldValue(Http.Request.User_Agent) + "\nConnection: " + http.fieldValue(Http.Request.Connection);
                    info += "\nMetodo de petición: " + http.fieldValue(Http.Request.RequestMethod);
                    
                    
                }
                if(http.hasField(Http.Request.Accept) ) {
                    info += "\nTipo contenido " + http.fieldValue(Http.Request.Content_Type);
                    info += "\nLongitud Contenido " + http.fieldValue(Http.Request.Content_Length);
                    info += "\nFecha: " + http.fieldValue(Http.Request.Date);
                }
            }
            if(packet.hasHeader(udp)){
                protocolo = "UDP";
                info += "\nUDP: ";
                info += " \nPuerto Destino: " + udp.source() + "\nPuerto Origen: "  + udp.destination();
                info += "\nSuma de verificación: " + udp.checksum();
                
            }
                
            Vector<String> datos = new Vector<String>();
                    datos.add(String.valueOf(model.getRowCount()));
                    datos.add(version);
                    datos.add(ipSrc);
                    datos.add(ipDest);
                    datos.add(protocolo);
                    datos.add(info);
                    model.addRow(datos);
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Iniciar;
    private javax.swing.JTable TablaPaqs;
    private javax.swing.JTextArea especificacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton parar;
    // End of variables declaration//GEN-END:variables
}
